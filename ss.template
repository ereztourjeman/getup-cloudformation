{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "support services, activemq(network broker) + mongodb(replicaset), ss01 tera um ebs para snaphosts: informar tres subnet ids para alta disponibilidade. O template cria 3 servidores, a configuração de replicaset do mongodb deve ser feita após a criacao do stack.",

  "Parameters" : {

    "KeyName" : {
      "Description" : "Chave SSH publica para admin",
      "Default" : "getup",
      "Type" : "String"
    },
    
    "PuppetHostname": {
      "Description" : "PuppetMaster hostname",
      "Default" : "puppetmaster.ops.getupcloud.com",
      "Type": "String"
    },

    "VpcId" : {
      "Type" : "String",
      "Default" : "vpc-8c4b07e5",
      "Description" : "Id do VPC"
    },

    "SubnetId1" : {
      "Type" : "String",
      "Description" : "Id da subnet para ss1. Obs: a zona é selecionada automaticamente"
    },
    
    "SubnetId2" : {
      "Type" : "String",
      "Description" : "Id da subnet para ss2. Obs: a zona é selecionada automaticamente"
    },
    
    "SubnetId3" : {
      "Type" : "String",
      "Description" : "Id da subnet para ss3. Obs: a zona é selecionada automaticamente"
    },
    "SSOpenshiftPasswd" : {
      "Type" : "String",
      "NoEcho" : "True",
      "Description" : "Senha do banco openshift_broker_dev"
    },

    "AmiId" : {
      "Type" : "String",
      "Default" : "ami-2a31bf1a",
      "Description" : "AMI utilizado para a instancia"
      
    },
    
    "InstanceType" : {
      "Description" : "Tamanho da instancia",
      "Type" : "String",
      "Default" : "t1.micro",
      "AllowedValues" : [ "t1.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "SecurityGroupId": {
      "Type" : "String",
      "Default" : "sg-f7130f9b",
      "Description" : "SecurityGroup"
    }

  },

"Mappings" : {
    "RegionMap" : {
      "us-west-2"  : { "AMI" : "ami-2a31bf1a", "AZa" : "us-west-2a" }
    }
  },
  "Resources": {

    "CFNInitUser" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Policies": [{
          "PolicyName": "AccessForCFNInit",
          "PolicyDocument" : {
            "Statement": [{
              "Effect"   : "Allow",
              "Action"   : "cloudformation:DescribeStackResource",
              "Resource" : "*"
            }]
          }
        }]
      }
    },
    
    "CFNKeys" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : { "Ref": "CFNInitUser" }
      }
    },

    "OpsDNSRecordSS1": {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneName" : "ops.getupcloud.com.",
        "Comment" : "A record created by cloudformation",
        "Name" : { "Fn::Join" : [ "", [{"Ref" : "AWS::StackName"}, "1.ops.getupcloud.com"]]},
        "Type" : "A",
        "TTL" : "300",
        "ResourceRecords" : [ {
          "Fn::GetAtt" : [ "Instance1","PrivateIp" ] 
        }]
      } 
    },
    
    "OpsDNSRecordSS2": {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneName" : "ops.getupcloud.com.",
        "Comment" : "A record created by cloudformation",
        "Name" : { "Fn::Join" : [ "", [{"Ref" : "AWS::StackName"}, "2.ops.getupcloud.com"]]},
        "Type" : "A",
        "TTL" : "300",
        "ResourceRecords" : [ {
          "Fn::GetAtt" : [ "Instance2","PrivateIp" ] 
        }]
      } 
    },

    "OpsDNSRecordSS3": {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneName" : "ops.getupcloud.com.",
        "Comment" : "A record created by cloudformation",
        "Name" : { "Fn::Join" : [ "", [{"Ref" : "AWS::StackName"}, "3.ops.getupcloud.com"]]},
        "Type" : "A",
        "TTL" : "300",
        "ResourceRecords" : [ {
          "Fn::GetAtt" : [ "Instance3","PrivateIp" ] 
        }]
      } 
    },
    "NewVolume" : {
      "Type" : "AWS::EC2::Volume",
      "Properties" : {
        "Size" : "10",
        "AvailabilityZone" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AZa" ]}
      }
    }, 
    "Instance1": {  
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "puppet"     : [],
                "ruby-devel" : [],
                "gcc"        : [],
                "make"       : [],
                "rubygems"   : []
              },
              "rubygems" : {
                "json"       : []
              }
            },
            "files" : {
              "/etc/yum.repos.d/epel.repo" : {
                "source" : "https://s3.amazonaws.com/cloudformation-examples/enable-epel-on-amazon-linux-ami",
                "mode"   : "000644",
                "owner"  : "root",
                "group"  : "root"
              },
              "/etc/puppet/puppet.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "   logdir=/var/log/puppet\n",
                  "   rundir=/var/run/puppet\n",
                  "   ssldir=$vardir/ssl\n",
                  "   pluginsync=true\n",
                  "[agent]\n",
                  "   classfile=$vardir/classes.txt\n",
                  "   localconfig=$vardir/localconfig\n",
                  "   server=",{ "Ref" : "PuppetHostname" },"\n"
                ]] },
                "mode" : "000644",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {  
                "puppet" : {
                  "enabled" : "true",
                  "ensureRunning" : "true"                
                }
              }
            }
          }
        },
        "Puppet" : {
          "roles"    : "ss",
          "membernumber" : "1",
          "ss_openshift_passwd" : { "Ref" : "SSOpenshiftPasswd"}
        }
      },
      "Properties": {
        "ImageId" : { "Ref" : "AmiId" },
        "SecurityGroupIds" : [{ "Ref" : "SecurityGroupId" }],
        "SubnetId" : { "Ref" : "SubnetId1" },
        "KeyName" : { "Ref" : "KeyName" },
        "InstanceType": { "Ref": "InstanceType" },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash\n",
          "yum update -y aws-cfn-bootstrap\n",
          "while [ ! -e /dev/sdo ]; do echo Waiting for EBS volume to attach; sleep 5; done\n",
          "/bin/hostname ss1\n",

          "/opt/aws/bin/cfn-init --region ", { "Ref" : "AWS::Region" },
          "    -s ", { "Ref" : "AWS::StackName" }, " -r Instance1 ",
          "    --access-key ", { "Ref" : "CFNKeys" },
          "    --secret-key ", { "Fn::GetAtt" : ["CFNKeys", "SecretAccessKey"]}, "\n",
          "/opt/aws/bin/cfn-signal -e $? '", { "Ref" : "ApplicationWaitHandle" }, "'\n"
        ]]}}
      }
    },
    "MountPoint" : {
      "Type" : "AWS::EC2::VolumeAttachment",
      "Properties" : {
        "InstanceId" : { "Ref" : "Instance1" },
        "VolumeId"  : { "Ref" : "NewVolume" },
        "Device" : "/dev/sdo"
      }
    },

    "NewVolume" : {
      "Type" : "AWS::EC2::Volume",
      "Properties" : {
        "Size" : "5",
        "AvailabilityZone" : { "Fn::GetAtt" : [ "Instance1", "AvailabilityZone" ]}
      }
    },    
    "Instance2": {  
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "puppet"     : [],
                "ruby-devel" : [],
                "gcc"        : [],
                "make"       : [],
                "rubygems"   : []
              },
              "rubygems" : {
                "json"       : []
              }
            },
            "files" : {
              "/etc/yum.repos.d/epel.repo" : {
                "source" : "https://s3.amazonaws.com/cloudformation-examples/enable-epel-on-amazon-linux-ami",
                "mode"   : "000644",
                "owner"  : "root",
                "group"  : "root"
              },
              "/etc/puppet/puppet.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "   logdir=/var/log/puppet\n",
                  "   rundir=/var/run/puppet\n",
                  "   ssldir=$vardir/ssl\n",
                  "   pluginsync=true\n",
                  "[agent]\n",
                  "   classfile=$vardir/classes.txt\n",
                  "   localconfig=$vardir/localconfig\n",
                  "   server=",{ "Ref" : "PuppetHostname" },"\n"
                ]] },
                "mode" : "000644",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {  
                "puppet" : {
                  "enabled" : "true",
                  "ensureRunning" : "true"                
                }
              }
            }
          }
        },
        "Puppet" : {
          "roles"    : "ss",
          "membernumber" : "2",
          "ss_openshift_passwd" : { "Ref" : "SSOpenshiftPasswd"}
        }
      },
      "Properties": {
        "ImageId" : { "Ref" : "AmiId" },
        "SecurityGroupIds" : [{ "Ref" : "SecurityGroupId" }],
        "SubnetId" : { "Ref" : "SubnetId2" },
        "KeyName" : { "Ref" : "KeyName" },
        "InstanceType": { "Ref": "InstanceType" },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash\n",
          "yum update -y aws-cfn-bootstrap\n",
          "/bin/hostname ss2\n",

          "/opt/aws/bin/cfn-init --region ", { "Ref" : "AWS::Region" },
          "    -s ", { "Ref" : "AWS::StackName" }, " -r Instance2 ",
          "    --access-key ", { "Ref" : "CFNKeys" },
          "    --secret-key ", { "Fn::GetAtt" : ["CFNKeys", "SecretAccessKey"]}, "\n",
          "/opt/aws/bin/cfn-signal -e $? '", { "Ref" : "ApplicationWaitHandle" }, "'\n"
        ]]}}
      }
    },
    "Instance3": {  
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "puppet"     : [],
                "ruby-devel" : [],
                "gcc"        : [],
                "make"       : [],
                "rubygems"   : []
              },
              "rubygems" : {
                "json"       : []
              }
            },
            "files" : {
              "/etc/yum.repos.d/epel.repo" : {
                "source" : "https://s3.amazonaws.com/cloudformation-examples/enable-epel-on-amazon-linux-ami",
                "mode"   : "000644",
                "owner"  : "root",
                "group"  : "root"
              },
              "/etc/puppet/puppet.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "   logdir=/var/log/puppet\n",
                  "   rundir=/var/run/puppet\n",
                  "   ssldir=$vardir/ssl\n",
                  "   pluginsync=true\n",
                  "[agent]\n",
                  "   classfile=$vardir/classes.txt\n",
                  "   localconfig=$vardir/localconfig\n",
                  "   server=",{ "Ref" : "PuppetHostname" },"\n"
                ]] },
                "mode" : "000644",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {  
                "puppet" : {
                  "enabled" : "true",
                  "ensureRunning" : "true"                
                }
              }
            }
          }
        },
        "Puppet" : {
          "roles"    : "ss",
          "membernumber" : "3" ,
          "ss_openshift_passwd" : { "Ref" : "SSOpenshiftPasswd"}
        }
      },
      "Properties": {
        "ImageId" : { "Ref" : "AmiId" },
        "SecurityGroupIds" : [{ "Ref" : "SecurityGroupId" }],
        "SubnetId" : { "Ref" : "SubnetId3" },
        "KeyName" : { "Ref" : "KeyName" },
        "InstanceType": { "Ref": "InstanceType" },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash\n",
          "yum update -y aws-cfn-bootstrap\n",
          "/bin/hostname ss3\n",

          "/opt/aws/bin/cfn-init --region ", { "Ref" : "AWS::Region" },
          "    -s ", { "Ref" : "AWS::StackName" }, " -r Instance3 ",
          "    --access-key ", { "Ref" : "CFNKeys" },
          "    --secret-key ", { "Fn::GetAtt" : ["CFNKeys", "SecretAccessKey"]}, "\n",
          "/opt/aws/bin/cfn-signal -e $? '", { "Ref" : "ApplicationWaitHandle" }, "'\n"
        ]]}}
      }
    },
    "ApplicationWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "ApplicationWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn"  : "Instance1",
      "Properties" : {
        "Handle"   : { "Ref" : "ApplicationWaitHandle" },
        "Count"    : "3",
        "Timeout"  : "600"
      }
    }
  },
  "Outputs" : {
    "Instanceid1" : {
      "Value" : { "Ref" : "Instance1" },
      "Description" : "Instance Id of newly created instance"
    },
    "Instanceid2" : {
      "Value" : { "Ref" : "Instance2" },
      "Description" : "Instance Id of newly created instance"
    },
    "Instanceid3" : {
      "Value" : { "Ref" : "Instance3" },
      "Description" : "Instance Id of newly created instance"
    }
  }
}